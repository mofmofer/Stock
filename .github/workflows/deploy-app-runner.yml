name: Build and Deploy to App Runner

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-1' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  APP_RUNNER_SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories \
            --repository-names "$ECR_REPOSITORY" \
            --region "$AWS_REGION" >/dev/null 2>&1 || \
          aws ecr create-repository \
            --repository-name "$ECR_REPOSITORY" \
            --image-tag-mutability IMMUTABLE \
            --region "$AWS_REGION"

      - name: Build container image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
        run: |
          docker build \
            --tag "$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            .

      - name: Push image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
        run: |
          docker push "$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update App Runner service
        if: env.APP_RUNNER_SERVICE_ARN != ''
        env:
          IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws apprunner update-service \
            --service-arn "$APP_RUNNER_SERVICE_ARN" \
            --source-configuration "ImageRepository={ImageIdentifier=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG,ImageRepositoryType=ECR,ImageConfiguration={Port=8080}}"

      - name: Wait for App Runner deployment to complete
        if: env.APP_RUNNER_SERVICE_ARN != ''
        env:
          MAX_ATTEMPTS: 30
          SLEEP_SECONDS: 20
        run: |
          attempt=1
          while [ "$attempt" -le "$MAX_ATTEMPTS" ]; do
            status=$(aws apprunner describe-service \
              --service-arn "$APP_RUNNER_SERVICE_ARN" \
              --query 'Service.Status' \
              --output text)

            echo "App Runner status: $status (attempt $attempt/$MAX_ATTEMPTS)"

            if [ "$status" = "RUNNING" ]; then
              echo "Service is running."
              exit 0
            fi

            if [ "$status" != "OPERATION_IN_PROGRESS" ]; then
              echo "Deployment failed or entered unexpected status: $status"
              exit 1
            fi

            attempt=$((attempt + 1))
            sleep "$SLEEP_SECONDS"
          done

          echo "Timed out waiting for App Runner service to reach RUNNING state."
          exit 1
